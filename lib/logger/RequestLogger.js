const oo = require('@carbon-io/carbon-core').atom.oo(module)
const  _ = require('lodash')

/******************************************************************************
 * @interface RequestLogger
 */
const RequestLogger = oo({
    _ctorName: 'RequestLogger',
    _C: function() {
        if (this.constructor === RequestLogger)
            throw new Error('Interface')
    },

    _initialize: function() {

    },

    /**********************************************************************
     * method _wrapResponseSetHeader
     *
     * Wraps an Express.js Response object's setHeader() method
     * in order to retain the response headers after the response has been
     * sent.
     * 
     * The headers are available in the Response object's `sent.headers`
     * property.
     * 
     * @param {Express.Response} res - an Express.js Response object
     */
    _wrapResponseSetHeader: function(res) {
        const res_methods = {
            setHeader: res.setHeader
        }

        res.setHeader = function(name, value) {
            if (!res.sent)
                res.sent = { }
            if (!res.sent.headers)
                res.sent.headers = { }

            res.sent.headers[name] = value

            res_methods.setHeader.apply(res, arguments)
        }
    },

    /**********************************************************************
     * method _wrapResponseWriteAndEnd
     *
     * Wraps an Express.js Response object's write() and end() methods
     * in order to retain the response body after the response has been
     * sent.
     * 
     * The response body is available in the Response object's `sent.body`
     * property.
     * 
     * @param {Express.Response} res - an Express.js Response object
     */
    _wrapResponseWriteAndEnd: function(res) {
        const chunks = []

        const res_methods = {
            write: res.write,
            end: res.end
        }

        res.write = function(chunk) {
            chunks.push(chunk)

            res_methods.write.apply(res, arguments)
        }
        res.end = function(chunk) {
            if (chunk)
                chunks.push(chunk)

            const chunks_string = Buffer.concat(chunks).toString('utf8')

            if (!res.sent) res.sent = { }
            
            try {
                res.sent.body = JSON.parse(chunks_string)
            } catch (e) {
                res.sent.body = chunks_string
            }

            res_methods.end.apply(res, arguments)
        }
    },

    /**********************************************************************
     * method createLogRecord
     *
     * Returns an object describing an HTTP request and/or response.
     * 
     * @param {object} request - an object describing the headers, parameters
     * and body of an HTTP request
     * @param {object} response - an object describing the headers and body
     * of the response to `request`
     */
    createLogRecord: function(request, response) {
        return { request, response }
    },

    /**********************************************************************
     * method log
     *
     * Persists a log record generated by createLogRecord().
     * 
     * @param {object} record - the record to log
     */
    log: function(record) {
        throw new Error('Not implemented')
    }
})

module.exports = RequestLogger