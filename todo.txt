o Swagger ui and auth
  - Need to add the api key header name in CORS headers for swagger
  header to work for key
o Clean up options in acl (not needed)
  --
  http://iankent.uk/2014/02/11/globally-handling-options-requests-in-play-framework/

o Clean up response codes (201 for posts?)
  http://blog.ploeh.dk/2013/04/30/rest-lesson-learned-avoid-204-responses/

o in maker defineProperties and _init called from constructor (not _C
but real consstructor) so we can have new called on oo produced classes
o Finish with Operation
o Maker to allow _type passed in
o MongoDBCollection db vs dbs
o Views and forms
o Inchworm /values?ids=
   - maybe id=1&id=2 just works?
o Show example of Inch with nested :id endpoint
o Upgrade Express
  -- when you do need to change req.header to req.get (maybe) in ApiKeyAuthenticator.js
o Responds with stuff in swagger spec (for errors etc...)
o Flesh out api for MongoDBCollections to be like current data api
o Do example of feedback form for customer why you left?
o Do a pass on trying to cause errors and see how they get handled
o ObjectIds in swagger coming out wrong -- probably toString of ObjectId
o Why is collection post returning array from insert (driver or us?)
  can see in swagger ui
o Do we want an Endpoint.operations() that gets all the defined operations?
o What's up with swagger and :id? vs :id
o How does one make /bin wrappers. shebang or bsh?
o in swagger ui if you do an obj get with no id the request url is
odd. Think this is swagge bug
   http://Wills-MacBook-Pro.local:8888/zipcodes/{id}

LATER
o leafnode async
o X-Powered-By: Express
o Deal with encryption in authenticators
o UserOwnedMDBCollection
o Auth / AC per endpoint? Telemetry example is a good one
o envelope format for GET
o validate schema 
o client 
o client cmdline 
o shell
o socket.io
o CREATE method
o Make sure you cant, as a client, use HTTP Method foo and end up
calling endpoint.foo (security)
o MongoDBDatabase endpoint
  - I think we should be able to re-use MongoDBCollections even if we
  are lazy to create them, but might choose to impl not lazy collction creation?
o decide on /lib/ shorcut in maker
o write reasoning for o({...}) to understand _type in nested docs vs
needed nested o({...})
- LRU cache endpoint based on a field
o what is difference between PUT and PATCH?

PUNTED?
o start/stpo at cmdline? NO THIS SHOULD BE MANAGED BY PROCESS MANAGER
o indexes. maybe allow def on OS and have flags for auto-create vs
having to run command vs nothing


--------

> a = { get foo() { return 7 }}
{ foo: [Getter] }
> a
{ foo: [Getter] }
> a.foo
7
http://stackoverflow.com/questions/14047809/js-defineproperty-and-prototype


------ main booty
https://www.npmjs.com/package/lone (eh seems complex)
http://stackoverflow.com/questions/9449485/node-js-native-module-third-party-main-not-working (gyp)
   https://github.com/joyent/node/blob/master/node.gyp
http://qnalist.com/questions/5517523/tutorial-one-hackish-way-to-compile-js-and-native-addons-into-nodejs

--------------------
Creating users: how do we control the object created and how do we
control DOS?
   - just make it artificially slow? 
   - ip throttling? (Good for DOS but not DDOS)
   - Schema on post / insert good enough?
     - WAIT -- maybe use default acl template to define what fields
     they can write to... that is clean
       -- and then maybe for User collections you forbit the client
       from inserting a doc with an acl
     - adding custom fields? -- override insert and call
     this._super('insert')(newO)
     - or insertXform: function(obj) { ... } // maybe I both like and
     say why is this needed if you can _super?
   - How do you get a new user id? Just do ObjectId or let user
     - create involved? i think so even if there is no CREATE HTTP
     verb -- still who calls create, client or insert... hmmmm
     complicated more I think about it
   select? Offer other sequence generators? This generic for all
   collections? OS must make _id -- should also allow to be supplied
  

Example default user acl:

{ 
  aclTemplate: {
    "*": { 
       read: {
         _id: true,
         username: true,
         '*': false
       },
       write: false
    },
    "user:@req.user._id": { // which came from create(). Maybe better
                          // or should it just be <owner>?

     read: {
        "secretField": false
        "*": true // needed since otherwise no field mention is false
     },
     write: {
       username: true, 
       password: true,
       email: true,
       "*": false // would be implied if absent
     } 
     
   }
  }
}

Do we want to make calling create() a formal part of the process?

Should this be the default of create() (or the wrapper to create):

create: function() {
  var result = {
    _id: this.generateId(),
  }

  result.__acl__ = newAcl(result) // so that the generator has the
                                  // user _id and whatever else is needed in the template
}

But you can write:

create: function(req) { // want req? ideally no. maybe create(user)?
   return {
      _id: this.generateId() // should this be in wrapper too?
      password: "passwordchangeme",
      organization: this.
   }
}

Another idea is have req.user be { _id: <id>, __acl__: <acl> } on the
request at right times (like when using User collection)


-----

Blogger

http://webcache.googleusercontent.com/search?q=cache:vlJ_IH4ZBP4J:npmawesome.com/posts/2014-04-29-compare-express-restify-hapi-loopback/+&cd=8&hl=en&ct=clnk&gl=us
