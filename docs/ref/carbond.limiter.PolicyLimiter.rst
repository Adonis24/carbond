=============================
carbond.limiter.PolicyLimiter
=============================

:js:class:`~carbond.limiter.PolicyLimiter` allows you to specify a policy (see:
:js:class:`~carbond.limiter.LimiterPolicy`) and a mechanism to group requests 
(see :js:class:`~carbond.limiter.LimiterSelector`) to be evaluated by the policy.

Class
-----

.. js:class:: carbond.limiter.PolicyLimiter

    *extends*: :js:class:`~carbond.limiter.Limiter`

    .. js:attribute:: selector

       :type: :js:class:`~carbond.limiter.LimiterSelector`
       :required: ``true``

       The selector used to group incoming requests.

    .. js:attribute:: policy

       :type: :js:class:`~carbond.limiter.LimiterPolicy`
       :required: ``true``

       The policy used to evaluate incoming requests.

    .. js:function:: initialize(service, node)

        :param service: the root ``Service`` instance
        :type service: :js:class:`~carbond.Service`
        :param node: the ``Endpoint`` that we are attached to
        :type node: :js:class:`carbond.Endpoint`

        Extends :js:func:`carbond.limiter.Limiter.initialize` to initialize the
        policy and policy state.

    .. js:function:: process(req, res, next) 

       :param req: the current ``Request`` object
       :type req: :js:class:`express.request`
       :param res: the current ``Response`` object
       :type res: :js:class:`express.response`
       :param next: continuation
       :type next: :js:class:`Function`

       Implements :js:func:`carbond.limiter.Limiter.process` to apply 
       :js:attr:`~.policy` using the grouping generated by
       :js:attr:`~.selector` and, finally, passing the request on if the policy
       allows or sending a ``503`` response if not.

    .. js:function:: resetState()

        *class method*
        
        Reset the state across all policies.

Example
-------

.. literalinclude:: ../code-frags/PolicyLimiterExample.js
    :language: js
    :lines: 17-90
    :linenos:

